{"ast":null,"code":"// import React from \"react\";\n// import { Container,Row,Col,Button } from \"reactstrap\";\n// import {Link} from \"react-router-dom\";\n// import '../styles/Thankyou.css';\n// const Thankyou=()=>{\n//     return(\n//     <section>\n//         <Container>\n//             <Row>\n//                 <Col lg='12' className=\"pt-5 text-center\">\n//                 <div className=\"thank__you\">\n//                     <span><i class=\"ri-checkbox-circle-fill\"></i></span>\n//                     <h1 className=\"mb-3 fw-semibold\">Thank You</h1>\n//                     <h3 className=\"mb-4\">your Tour is booked</h3>\n//                     <Button className=\"btn primary__btn w-25\"><Link to='/home'>Back to Home</Link></Button>\n//                 </div>\n//                 </Col>\n//             </Row>\n//         </Container>\n//     </section>);\n// }\n// export default Thankyou;\n// Thankyou.jsx\n// // bookingRoutes.js\nconst express = require(\"express\");\nconst router = express.Router();\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n// Path to the data file\nconst dataFilePath = path.join(__dirname, \"../data.json\");\n\n// Helper function to read data\nconst readData = () => {\n  try {\n    return JSON.parse(fs.readFileSync(dataFilePath));\n  } catch (error) {\n    throw new Error(\"Failed to read data\");\n  }\n};\n\n// Helper function to write data\nconst writeData = data => {\n  try {\n    fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2));\n  } catch (error) {\n    throw new Error(\"Failed to write data\");\n  }\n};\n\n// Booking route\nrouter.post(\"/\", (req, res, next) => {\n  try {\n    const booking = req.body;\n    const data = readData();\n    data.bookings.push(booking);\n    writeData(data);\n    res.status(201).json({\n      message: \"Booking successful\"\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Cancel booking route\nrouter.delete(\"/cancel\", (req, res, next) => {\n  try {\n    const data = readData();\n    const bookings = data.bookings;\n\n    // Find the last booking based on fullname from the existing booking data\n    const lastBookingIndex = [...bookings].reverse().findIndex(booking => booking.fullname === bookings[bookings.length - 1].fullname);\n\n    // Check if the booking exists\n    if (lastBookingIndex === -1) {\n      return res.status(404).json({\n        message: \"Booking not found.\"\n      });\n    }\n\n    // Calculate the correct index of the last matching booking\n    const actualIndex = bookings.length - 1 - lastBookingIndex;\n\n    // Remove the booking\n    bookings.splice(actualIndex, 1);\n\n    // Save the updated data back to the file\n    writeData(data);\n    res.status(200).json({\n      message: \"Booking canceled successfully.\"\n    });\n  } catch (error) {\n    next(error);\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","fs","path","dataFilePath","join","__dirname","readData","JSON","parse","readFileSync","error","Error","writeData","data","writeFileSync","stringify","post","req","res","next","booking","body","bookings","push","status","json","message","delete","lastBookingIndex","reverse","findIndex","fullname","length","actualIndex","splice","module","exports"],"sources":["C:/Users/MANMEET KAUR/Desktop/tour-management/frontend/src/pages/Thankyou.jsx"],"sourcesContent":["// import React from \"react\";\n// import { Container,Row,Col,Button } from \"reactstrap\";\n// import {Link} from \"react-router-dom\";\n// import '../styles/Thankyou.css';\n// const Thankyou=()=>{\n//     return(\n//     <section>\n//         <Container>\n//             <Row>\n//                 <Col lg='12' className=\"pt-5 text-center\">\n//                 <div className=\"thank__you\">\n//                     <span><i class=\"ri-checkbox-circle-fill\"></i></span>\n//                     <h1 className=\"mb-3 fw-semibold\">Thank You</h1>\n//                     <h3 className=\"mb-4\">your Tour is booked</h3>\n//                     <Button className=\"btn primary__btn w-25\"><Link to='/home'>Back to Home</Link></Button>\n//                 </div>\n//                 </Col>\n//             </Row>\n//         </Container>\n//     </section>);\n// }\n// export default Thankyou;\n// Thankyou.jsx\n// // bookingRoutes.js\nconst express = require(\"express\");\nconst router = express.Router();\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n// Path to the data file\nconst dataFilePath = path.join(__dirname, \"../data.json\");\n\n// Helper function to read data\nconst readData = () => {\n  try {\n    return JSON.parse(fs.readFileSync(dataFilePath));\n  } catch (error) {\n    throw new Error(\"Failed to read data\");\n  }\n};\n\n// Helper function to write data\nconst writeData = (data) => {\n  try {\n    fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2));\n  } catch (error) {\n    throw new Error(\"Failed to write data\");\n  }\n};\n\n// Booking route\nrouter.post(\"/\", (req, res, next) => {\n  try {\n    const booking = req.body;\n    const data = readData();\n    data.bookings.push(booking);\n    writeData(data);\n    res.status(201).json({ message: \"Booking successful\" });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Cancel booking route\nrouter.delete(\"/cancel\", (req, res, next) => {\n  try {\n    const data = readData();\n    const bookings = data.bookings;\n\n    // Find the last booking based on fullname from the existing booking data\n    const lastBookingIndex = [...bookings].reverse().findIndex(\n      (booking) => booking.fullname === bookings[bookings.length - 1].fullname\n    );\n\n    // Check if the booking exists\n    if (lastBookingIndex === -1) {\n      return res.status(404).json({ message: \"Booking not found.\" });\n    }\n\n    // Calculate the correct index of the last matching booking\n    const actualIndex = bookings.length - 1 - lastBookingIndex;\n\n    // Remove the booking\n    bookings.splice(actualIndex, 1);\n\n    // Save the updated data back to the file\n    writeData(data);\n\n    res.status(200).json({ message: \"Booking canceled successfully.\" });\n  } catch (error) {\n    next(error);\n  }\n});\n\nmodule.exports = router;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}