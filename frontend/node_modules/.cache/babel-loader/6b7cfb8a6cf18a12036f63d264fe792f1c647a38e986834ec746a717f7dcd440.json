{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MANMEET KAUR\\\\Desktop\\\\tour-management\\\\frontend\\\\src\\\\pages\\\\TodoList.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Container, Row, Col, Button, Input, Form, FormGroup } from 'reactstrap';\n// import './TodoList.css';\n\n// const TodoList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [newTask, setNewTask] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [email, setEmail] = useState('');\n\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   // Fetch tasks from backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/todos');\n//       const data = await response.json();\n//       setTasks(data);\n//     } catch (error) {\n//       console.error('Failed to fetch tasks:', error);\n//     }\n//   };\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     if (!newTask || !username || !email) {\n//       alert('Please fill all fields');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:5000/api/todos', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ task: newTask, username, email }),\n//       });\n\n//       if (response.ok) {\n//         setNewTask('');\n//         setUsername('');\n//         setEmail('');\n//         fetchTasks();\n//       } else {\n//         alert('Failed to add task');\n//       }\n//     } catch (error) {\n//       console.error('Failed to add task:', error);\n//     }\n//   };\n\n//   // Update a task\n//   const updateTask = async (task) => {\n//     try {\n//       await fetch(`http://localhost:5000/api/todos/${task.id}`, {\n//         method: 'PUT',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ completed: !task.completed }),\n//       });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Failed to update task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (id) => {\n//     try {\n//       await fetch(`http://localhost:5000/api/todos/${id}`, {\n//         method: 'DELETE',\n//       });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Failed to delete task:', error);\n//     }\n//   };\n\n//   return (\n//     <Container className=\"todo-container\">\n//       <Row>\n//         <Col lg=\"12\" className=\"text-center mt-4 mb-4\">\n//           <h1>To-Do List</h1>\n//           <Form onSubmit={addTask}>\n//             <FormGroup>\n//               <Input\n//                 type=\"text\"\n//                 placeholder=\"Task\"\n//                 value={newTask}\n//                 onChange={(e) => setNewTask(e.target.value)}\n//               />\n//             </FormGroup>\n//             <FormGroup>\n//               <Input\n//                 type=\"text\"\n//                 placeholder=\"Username\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//             </FormGroup>\n//             <FormGroup>\n//               <Input\n//                 type=\"email\"\n//                 placeholder=\"Email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//             </FormGroup>\n//             <Button type=\"submit\" color=\"primary\">Add Task</Button>\n//           </Form>\n//         </Col>\n//         <Col lg=\"12\">\n//           <ul className=\"task-list\">\n//             {tasks.map((task) => (\n//               <li key={task.id} className={task.completed ? 'completed' : ''}>\n//                 <span onClick={() => updateTask(task)}>{task.task}</span>\n//                 <Button color=\"danger\" size=\"sm\" onClick={() => deleteTask(task.id)}>\n//                   Delete\n//                 </Button>\n//               </li>\n//             ))}\n//           </ul>\n//         </Col>\n//       </Row>\n//     </Container>\n//   );\n// };\n\n// export default TodoList;\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Input, Form, FormGroup } from 'reactstrap';\nimport '../styles/home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/todos');\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error('Failed to fetch tasks:', error);\n    }\n  };\n  const addTask = async e => {\n    e.preventDefault();\n    if (!newTask || !username || !email) {\n      alert('Please fill all fields');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task: newTask,\n          username,\n          email\n        })\n      });\n      if (response.ok) {\n        setNewTask('');\n        setUsername('');\n        setEmail('');\n        fetchTasks();\n      } else {\n        alert('Failed to add task');\n      }\n    } catch (error) {\n      console.error('Failed to add task:', error);\n    }\n  };\n  const updateTask = async task => {\n    try {\n      await fetch(`http://localhost:5000/api/todos/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          completed: !task.completed\n        })\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error('Failed to update task:', error);\n    }\n  };\n  const deleteTask = async id => {\n    try {\n      await fetch(`http://localhost:5000/api/todos/${id}`, {\n        method: 'DELETE'\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error('Failed to delete task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"todo-container\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        lg: \"12\",\n        className: \"text-center mt-4 mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"To-Do List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: addTask,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              placeholder: \"Task\",\n              value: newTask,\n              onChange: e => setNewTask(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              placeholder: \"Username\",\n              value: username,\n              onChange: e => setUsername(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              type: \"email\",\n              placeholder: \"Email\",\n              value: email,\n              onChange: e => setEmail(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            color: \"primary\",\n            children: \"Add Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: \"12\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"task-list\",\n          children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: task.completed ? 'completed' : '',\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => updateTask(task),\n              children: task.task\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"danger\",\n              size: \"sm\",\n              onClick: () => deleteTask(task.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this)]\n          }, task.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoList, \"C1leZGy2eEBZ9mZZbOmRWz+Ak6w=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Button","Input","Form","FormGroup","TodoList","tasks","setTasks","newTask","setNewTask","username","setUsername","email","setEmail","fetchTasks","response","fetch","data","json","error","console","addTask","e","preventDefault","alert","method","headers","body","JSON","stringify","task","ok","updateTask","id","completed","deleteTask","target","value","map"],"sources":["C:/Users/MANMEET KAUR/Desktop/tour-management/frontend/src/pages/TodoList.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Container, Row, Col, Button, Input, Form, FormGroup } from 'reactstrap';\n// import './TodoList.css';\n\n// const TodoList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [newTask, setNewTask] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [email, setEmail] = useState('');\n\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   // Fetch tasks from backend\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/todos');\n//       const data = await response.json();\n//       setTasks(data);\n//     } catch (error) {\n//       console.error('Failed to fetch tasks:', error);\n//     }\n//   };\n\n//   // Add a new task\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     if (!newTask || !username || !email) {\n//       alert('Please fill all fields');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:5000/api/todos', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ task: newTask, username, email }),\n//       });\n\n//       if (response.ok) {\n//         setNewTask('');\n//         setUsername('');\n//         setEmail('');\n//         fetchTasks();\n//       } else {\n//         alert('Failed to add task');\n//       }\n//     } catch (error) {\n//       console.error('Failed to add task:', error);\n//     }\n//   };\n\n//   // Update a task\n//   const updateTask = async (task) => {\n//     try {\n//       await fetch(`http://localhost:5000/api/todos/${task.id}`, {\n//         method: 'PUT',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ completed: !task.completed }),\n//       });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Failed to update task:', error);\n//     }\n//   };\n\n//   // Delete a task\n//   const deleteTask = async (id) => {\n//     try {\n//       await fetch(`http://localhost:5000/api/todos/${id}`, {\n//         method: 'DELETE',\n//       });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Failed to delete task:', error);\n//     }\n//   };\n\n//   return (\n//     <Container className=\"todo-container\">\n//       <Row>\n//         <Col lg=\"12\" className=\"text-center mt-4 mb-4\">\n//           <h1>To-Do List</h1>\n//           <Form onSubmit={addTask}>\n//             <FormGroup>\n//               <Input\n//                 type=\"text\"\n//                 placeholder=\"Task\"\n//                 value={newTask}\n//                 onChange={(e) => setNewTask(e.target.value)}\n//               />\n//             </FormGroup>\n//             <FormGroup>\n//               <Input\n//                 type=\"text\"\n//                 placeholder=\"Username\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//             </FormGroup>\n//             <FormGroup>\n//               <Input\n//                 type=\"email\"\n//                 placeholder=\"Email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//             </FormGroup>\n//             <Button type=\"submit\" color=\"primary\">Add Task</Button>\n//           </Form>\n//         </Col>\n//         <Col lg=\"12\">\n//           <ul className=\"task-list\">\n//             {tasks.map((task) => (\n//               <li key={task.id} className={task.completed ? 'completed' : ''}>\n//                 <span onClick={() => updateTask(task)}>{task.task}</span>\n//                 <Button color=\"danger\" size=\"sm\" onClick={() => deleteTask(task.id)}>\n//                   Delete\n//                 </Button>\n//               </li>\n//             ))}\n//           </ul>\n//         </Col>\n//       </Row>\n//     </Container>\n//   );\n// };\n\n// export default TodoList;\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Input, Form, FormGroup } from 'reactstrap';\nimport '../styles/home.css';\n\nconst TodoList = () => {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/todos');\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error('Failed to fetch tasks:', error);\n    }\n  };\n\n  const addTask = async (e) => {\n    e.preventDefault();\n    if (!newTask || !username || !email) {\n      alert('Please fill all fields');\n      return;\n    }\n\n    try {\n      const response = await fetch('http://localhost:5000/api/todos', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ task: newTask, username, email }),\n      });\n\n      if (response.ok) {\n        setNewTask('');\n        setUsername('');\n        setEmail('');\n        fetchTasks();\n      } else {\n        alert('Failed to add task');\n      }\n    } catch (error) {\n      console.error('Failed to add task:', error);\n    }\n  };\n\n  const updateTask = async (task) => {\n    try {\n      await fetch(`http://localhost:5000/api/todos/${task.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ completed: !task.completed }),\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error('Failed to update task:', error);\n    }\n  };\n\n  const deleteTask = async (id) => {\n    try {\n      await fetch(`http://localhost:5000/api/todos/${id}`, {\n        method: 'DELETE',\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error('Failed to delete task:', error);\n    }\n  };\n\n  return (\n    <Container className=\"todo-container\">\n      <Row>\n        <Col lg=\"12\" className=\"text-center mt-4 mb-4\">\n          <h1>To-Do List</h1>\n          <Form onSubmit={addTask}>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                placeholder=\"Task\"\n                value={newTask}\n                onChange={(e) => setNewTask(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                placeholder=\"Username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </FormGroup>\n            <Button type=\"submit\" color=\"primary\">Add Task</Button>\n          </Form>\n        </Col>\n        <Col lg=\"12\">\n          <ul className=\"task-list\">\n            {tasks.map((task) => (\n              <li key={task.id} className={task.completed ? 'completed' : ''}>\n                <span onClick={() => updateTask(task)}>{task.task}</span>\n                <Button color=\"danger\" size=\"sm\" onClick={() => deleteTask(task.id)}>\n                  Delete\n                </Button>\n              </li>\n            ))}\n          </ul>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default TodoList;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,SAAS,QAAQ,YAAY;AAChF,OAAO,oBAAoB;AAAC;AAE5B,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdiB,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,YAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,C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"},"metadata":{},"sourceType":"module","externalDependencies":[]}